stages:
  - stage: linux_stage
    jobs:
      - job: binary_build
        pool:
          type: linux # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs

        variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
          ob_outputDirectory: "$(Build.SourcesDirectory)/out-binary-build" # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts

        steps: # These steps will be run in unrestricted container's network
          - task: onebranch.pipeline.version@1 # generates automatic version. For other versioning options check https://aka.ms/obpipelines/versioning
            displayName: "Setup BuildNumber"
            inputs:
              system: "RevisionCounter"
              major: "$(MajorVersion)"
              minor: "$(MinorVersion)"
              exclude_commit: false

          - task: Bash@3
            displayName: "Restore Dependencies"
            inputs:
              filePath: "$(Build.SourcesDirectory)/build/liftr-run-linux-restore.sh"

          - task: Bash@3
            displayName: "Build binary"
            inputs:
              filePath: "$(Build.SourcesDirectory)/build/liftr-run-linux-build.sh"

          - task: Bash@3
            displayName: "Run Tests"
            inputs:
              filePath: "$(Build.SourcesDirectory)/build/liftr-run-linux-tests.sh"
              failOnStderr: true

          - task: PublishTestResults@2
            displayName: "Publish Test Results"
            inputs:
              testResultsFormat: "VSTest"
              testResultsFiles: "**/*.trx"
              failTaskOnFailedTests: true
              testRunTitle: "Tests"
              buildPlatform: "Any CPU"
              buildConfiguration: "Debug"

          - task: onebranch.pipeline.signing@1 # https://aka.ms/obpipelines/signing
            displayName: "Sign build outputs"
            condition: and(succeeded(), eq(variables.enablingSigning, 'true'))
            inputs:
              command: "sign"
              signing_environment: "azure-ado"
              signing_profile: "internal_azure_service"
              files_to_sign: "!**/*.Tests.dll;**/bin/Release/**/Microsoft.Liftr.*.dll;**/bin/Release/**/Microsoft.Liftr.*.exe"
              search_root: "$(Build.SourcesDirectory)/src"

          - task: Bash@3
            displayName: "Package"
            inputs:
              filePath: "$(Build.SourcesDirectory)/build/liftr-run-linux-pack-onebranch.sh"

          - task: onebranch.pipeline.signing@1 # https://aka.ms/obpipelines/signing
            displayName: "Sign nuget package"
            condition: and(succeeded(), eq(variables.enablingSigning, 'true'))
            inputs:
              command: "sign"
              signing_environment: "azure-ado"
              signing_profile: "internal_azure_service"
              files_to_sign: "**/*.nupkg"
              search_root: "$(Build.SourcesDirectory)/nupkgs"

          - task: Bash@3
            displayName: "Move aritifacts for OneBranch upload"
            inputs:
              filePath: "$(Build.SourcesDirectory)/build/liftr-run-linux-move-artifacts-onebranch.sh"

  - stage: docker_stage
    dependsOn: linux_stage
    jobs:
      - job: generate_images
        pool:
          type: docker
          os: linux
        variables:
          ob_outputDirectory: "$(Build.SourcesDirectory)/bin"
          ob_git_checkout: true
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download output of linux stage binary build"
            inputs:
              artifact: drop_linux_stage_binary_build
              targetPath: $(Build.SourcesDirectory)/dst/drop_linux_stage_binary_build

          - task: onebranch.pipeline.imagebuildinfo@1
            name: "Build sample web docker image"
            inputs:
              repositoryName: sample-web-common-repo
              dockerFileRelPath: drop_linux_stage_binary_build/docker-build-input/Liftr.Sample.Web/Dockerfile
              dockerFileContextPath: drop_linux_stage_binary_build/docker-build-input/Liftr.Sample.Web/
              addPipelineData: false
              saveImageToPath: docker-images/sample-web-common-repo.tar.gz # folder name '.docker-images' cannot be changed and file name should have 'repositoryName' in the prefix
              saveMetadataToPath: ".onebranch-docker-metadata/gatewayWeb-metadata.json"
              build_tag: $(Build.BuildNumber)
              compress: true
              enable_network: false

          - task: onebranch.pipeline.imagebuildinfo@1
            name: "Build sample worker docker image"
            inputs:
              repositoryName: sample-worker-common-repo
              dockerFileRelPath: drop_linux_stage_binary_build/docker-build-input/Liftr.Sample.Worker/Dockerfile
              dockerFileContextPath: drop_linux_stage_binary_build/docker-build-input/Liftr.Sample.Worker/
              addPipelineData: false
              saveImageToPath: docker-images/sample-worker-common-repo.tar.gz # folder name '.docker-images' cannot be changed and file name should have 'repositoryName' in the prefix
              saveMetadataToPath: ".onebranch-docker-metadata/sampleWorker-metadata.json"
              build_tag: $(Build.BuildNumber)
              compress: true
              enable_network: false

          - task: onebranch.pipeline.imagebuildinfo@1
            name: "Build sample console docker image"
            inputs:
              repositoryName: sample-console-common-repo
              dockerFileRelPath: drop_linux_stage_binary_build/docker-build-input/Liftr.Sample.WorkerService/Dockerfile
              dockerFileContextPath: drop_linux_stage_binary_build/docker-build-input/Liftr.Sample.WorkerService/
              addPipelineData: false
              saveImageToPath: docker-images/sample-console-common-repo.tar.gz # folder name '.docker-images' cannot be changed and file name should have 'repositoryName' in the prefix
              saveMetadataToPath: ".onebranch-docker-metadata/sampleConsole-metadata.json"
              build_tag: $(Build.BuildNumber)
              compress: true
              enable_network: false

          - task: onebranch.pipeline.imagebuildinfo@1
            name: "Build test result aggregator docker image"
            inputs:
              repositoryName: test-result-aggregator
              dockerFileRelPath: drop_linux_stage_binary_build/docker-build-input/Liftr.TestResultAggregator/Dockerfile
              dockerFileContextPath: drop_linux_stage_binary_build/docker-build-input/Liftr.TestResultAggregator/
              addPipelineData: false
              saveImageToPath: docker-images/test-result-aggregator.tar.gz # folder name '.docker-images' cannot be changed and file name should have 'repositoryName' in the prefix
              saveMetadataToPath: ".onebranch-docker-metadata/testAggregator-metadata.json"
              build_tag: $(Build.BuildNumber)
              compress: true
              enable_network: false

          - task: onebranch.pipeline.imagebuildinfo@1
            name: "Build prom2icm docker image"
            inputs:
              repositoryName: prom2icm
              dockerFileRelPath: drop_linux_stage_binary_build/docker-build-input/Liftr.Prom2IcM/Dockerfile
              dockerFileContextPath: drop_linux_stage_binary_build/docker-build-input/Liftr.Prom2IcM/
              addPipelineData: false
              saveImageToPath: docker-images/prom2icm.tar.gz # folder name '.docker-images' cannot be changed and file name should have 'repositoryName' in the prefix
              saveMetadataToPath: ".onebranch-docker-metadata/prom2icm-metadata.json"
              build_tag: $(Build.BuildNumber)
              compress: true
              enable_network: false

  - stage: pack_aks_ev2
    dependsOn: docker_stage
    jobs:
      - job: main
        pool:
          type: linux
        variables:
          ob_outputDirectory: "$(Build.SourcesDirectory)/out-ev2"
          ob_git_checkout: true
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download artifact drop_docker_stage_generate_images"
            inputs:
              targetPath: $(Build.SourcesDirectory)/
              artifact: drop_docker_stage_generate_images

          - task: DownloadPipelineArtifact@2
            displayName: "Download artifact drop_linux_stage_binary_build"
            inputs:
              targetPath: $(Build.SourcesDirectory)/out-binary-build
              artifact: drop_linux_stage_binary_build

          - task: Bash@3
            displayName: "Write Build Number to disk"
            inputs:
              targetType: "inline"
              script: echo $(Build.BuildNumber) > build-number.txt

          - task: Bash@3
            displayName: "Package AKS EV2"
            inputs:
              filePath: "$(Build.SourcesDirectory)/build/liftr-run-linux-pack-ev2-ext-onebranch.sh"

  - stage: pack_sbi_ev2
    dependsOn: docker_stage
    jobs:
      - job: main
        pool:
          type: linux
        variables:
          ob_outputDirectory: "$(Build.SourcesDirectory)/out-ev2-base-image"
          ob_git_checkout: true
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download artifact drop_docker_stage_generate_images"
            inputs:
              targetPath: $(Build.SourcesDirectory)/
              artifact: drop_docker_stage_generate_images

          - task: DownloadPipelineArtifact@2
            displayName: "Download artifact drop_linux_stage_binary_build"
            inputs:
              targetPath: $(Build.SourcesDirectory)/out-binary-build
              artifact: drop_linux_stage_binary_build

          - task: Bash@3
            displayName: "Copy Build Number"
            inputs:
              targetType: "inline"
              script: echo $(Build.BuildNumber) > build-number.txt

          - task: Bash@3
            displayName: "Package SBI EV2"
            inputs:
              filePath: "$(Build.SourcesDirectory)/build/liftr-run-linux-pack-baseimage-onebranch.sh"
