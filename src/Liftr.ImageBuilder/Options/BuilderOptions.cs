//-----------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//-----------------------------------------------------------------------------

using Microsoft.Azure.Management.ResourceManager.Fluent.Core;
using Microsoft.Liftr.Fluent.Contracts;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;

namespace Microsoft.Liftr.ImageBuilder
{
    public class BuilderOptions
    {
        /// <summary>
        /// The Azure Subscription Id of the subscription in which all the resources will be provisioned.
        /// </summary>
        public Guid SubscriptionId { get; set; }

        /// <summary>
        /// The region where all those resources will be provisioned.
        /// For the Bake step, it will create the Azure VM image builder in that region.
        /// The suportted AIB regions can be found at: https://aka.ms/liftr/aib
        /// </summary>
        [JsonConverter(typeof(RegionConverter))]
        public Region Location { get; set; }

        /// <summary>
        /// Resource group name.
        /// </summary>
        public string ResourceGroupName { get; set; }

        /// <summary>
        /// The name of the shared image gallery.
        /// </summary>
        public string ImageGalleryName { get; set; }

        /// <summary>
        /// The retention time for each image version in the shared image gallery.
        /// 0 means do not clean up old images.
        /// </summary>
        public int ImageVersionRetentionTimeInDays { get; set; } = 15;

        /// <summary>
        /// When baking the VM image, if the generated VHD need to be exported to a storage account.
        /// This is requred for imprting the image to another Shared Image Gallery or another cloud.
        /// </summary>
        public bool ExportVHDToStorage { get; set; } = false;

        /// <summary>
        /// We can provision an ACR for you to store your container images.
        /// When this is enabled, a container registry will be created.
        /// During image baking process, the ACR metadata like endpoint will be accessble for you.
        /// You will also be able to get the credentials to pull down the images into your VM image.
        /// </summary>
        public bool UseACR { get; set; } = false;

        /// <summary>
        /// The regions that the VM image will be replicated to in the shared image gallery.
        /// See details at: https://aka.ms/liftr/sig-replication
        /// </summary>
        [JsonProperty(ItemConverterType = typeof(RegionConverter))]
        public IEnumerable<Region> ImageReplicationRegions { get; set; }

        /// <summary>
        /// The number of replicas of the Image Version to be created per region.
        /// This property can be updated after the image is created.
        /// See details at: https://aka.ms/liftr/sig-replication
        /// </summary>
        public int RegionalReplicaCount { get; set; } = 1;

        /// <summary>
        /// After successful runing Azure VM Image Builder, if the AIB template be deleted.
        /// When the AIB template is deleted, the resource group generated by AIB will also be deleted.
        /// The packer logs will also be deleted.
        /// </summary>
        public bool KeepAzureVMImageBuilderLogs { get; set; } = false;

        /// <summary>
        /// The size of the VM that will be running packer.
        /// </summary>
        public string PackerVMSize { get; set; } = "Standard_D2s_v3";

        public ContentStoreOptions ContentStoreOptions { get; set; } = new ContentStoreOptions();

        public void CheckValid()
        {
            if (string.IsNullOrEmpty(ResourceGroupName))
            {
                throw new InvalidOperationException($"{nameof(ResourceGroupName)} cannot be null or empty.");
            }

            if (string.IsNullOrEmpty(ImageGalleryName))
            {
                throw new InvalidOperationException($"{nameof(ImageGalleryName)} cannot be null or empty.");
            }

            if (Location == null)
            {
                throw new InvalidOperationException($"{nameof(Location)} cannot be null.");
            }

            if (ImageVersionRetentionTimeInDays < 0)
            {
                throw new InvalidOperationException($"{nameof(ImageVersionRetentionTimeInDays)} cannot be negative.");
            }
        }
    }
}
